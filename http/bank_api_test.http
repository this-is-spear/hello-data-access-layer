###
# 은행 서비스 API 테스트
# IDE에서 직접 실행하여 API를 테스트할 수 있습니다.
###

# 기본 URL 설정
@baseUrl = http://localhost:8080/api/bank

### 1. 특정 계좌번호로 첫 번째 계좌 생성
# 랜덤 ID로 계좌 생성
POST {{baseUrl}}/accounts
Content-Type: application/json


{
  "accountNumber": "ACCT-12346"
}
### 2. 특정 계좌번호로 두 번째 계좌 생성
POST {{baseUrl}}/accounts
Content-Type: application/json

{
  "accountNumber": "ACCT-12345"
}

### 3. 모든 계좌 목록 조회
GET {{baseUrl}}/accounts

### 4. 첫 번째 계좌의 잔액 조회 (생성된 계좌 번호로 변경 필요)
# 실행 전에 아래 URL의 계좌번호를 실제 생성된 계좌번호로 변경하세요
GET {{baseUrl}}/accounts/ACCT-12346

### 5. 특정 계좌번호로 생성한 두 번째 계좌 잔액 조회
GET {{baseUrl}}/accounts/ACCT-12345

### 6. 계좌 간 이체 실행
# 실행 전에 아래 JSON의 계좌번호를 실제 생성된 계좌번호로 변경하세요
POST {{baseUrl}}/transfers
Content-Type: application/json

{
  "sourceAccountNumber": "ACCT-12345",
  "targetAccountNumber": "ACCT-12346",
  "amount": 100.50
}

### 7. 이체 후 출금 계좌 잔액 확인
GET {{baseUrl}}/accounts/ACCT-12345

### 8. 이체 후 입금 계좌 잔액 확인
# 실행 전에 아래 URL의 계좌번호를 실제 생성된 계좌번호로 변경하세요
GET {{baseUrl}}/accounts/ACCT-12346

### 9. 존재하지 않는 계좌로 이체 시도 (에러 케이스)
POST {{baseUrl}}/transfers
Content-Type: application/json

{
  "sourceAccountNumber": "ACCT-12345",
  "targetAccountNumber": "ACCT-123410",
  "amount": 50.25
}

### 10. 동일 계좌로 이체 시도 (에러 케이스)
POST {{baseUrl}}/transfers
Content-Type: application/json

{
  "sourceAccountNumber": "ACCT-12345",
  "targetAccountNumber": "ACCT-12345",
  "amount": 50.25
}

### 11. 또 다른 계좌 생성
POST {{baseUrl}}/accounts
Content-Type: application/json

{
  "accountNumber": "ACCT-67890"
}

### 12. 복합 트랜잭션: 여러 계좌 간 순차적 이체
# 첫 번째 계좌에서 두 번째 계좌로 이체
POST {{baseUrl}}/transfers
Content-Type: application/json

{
  "sourceAccountNumber": "ACCT-12345",
  "targetAccountNumber": "ACCT-67890",
  "amount": 25.50
}

### 두 번째 계좌에서 세 번째 계좌로 이체
# 실행 전에 아래 JSON의 계좌번호를 실제 생성된 계좌번호로 변경하세요
POST {{baseUrl}}/transfers
Content-Type: application/json

{
  "sourceAccountNumber": "ACCT-67890",
  "targetAccountNumber": "ACCT-12346",
  "amount": 10.00
}

### 13. 복합 트랜잭션 후 모든 계좌 잔액 확인
GET {{baseUrl}}/accounts
