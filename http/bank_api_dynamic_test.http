###
# 은행 서비스 API 테스트 - 변수 사용 및 응답 처리 버전
# IntelliJ IDEA, VS Code 등의 HTTP 클라이언트를 사용하는 경우 
# 응답 데이터를 변수에 저장하고 이를 후속 요청에 사용할 수 있습니다.
###

# 기본 URL 설정
@baseUrl = http://localhost:8080/api/bank

### 1. 테스트 데이터 준비: 여러 개의 계좌 생성

# 계좌 생성
POST {{baseUrl}}/accounts
Content-Type: application/json

{
}

### 2. 모든 계좌 목록 조회 및 응답에서 계좌 정보 추출
# 응답에서 첫 번째 계좌 번호를 추출하여 변수에 저장합니다.
# 응답을 처리하는 방식은 HTTP 클라이언트마다 다를 수 있습니다.

# IntelliJ IDEA에서는 다음과 같이 사용합니다:
GET {{baseUrl}}/accounts

> {%
    // 응답에서 첫 번째 계좌를 추출
    const response = JSON.parse(response.body);
    if (response.accounts && response.accounts.length > 0) {
        // 임의의 계좌 선택 (여기서는 첫 번째 계좌)
        const randomIndex = Math.floor(Math.random() * response.accounts.length);
        const selectedAccount = response.accounts[randomIndex];
        
        // 변수에 저장
        client.global.set("selectedAccountNumber", selectedAccount.accountNumber);
        client.global.set("selectedAccountBalance", selectedAccount.balance);
        
        // 콘솔에 출력
        console.log(`Selected Account: ${selectedAccount.accountNumber} with balance: ${selectedAccount.balance}`);
    } else {
        console.log("No accounts found in the response");
    }
%}

### 3. 선택된 계좌의 잔액 조회
# 이전 요청에서 추출한 계좌 번호를 사용합니다.
GET {{baseUrl}}/accounts/{{selectedAccountNumber}}

### 4. 선택된 계좌에서 다른 계좌로 이체
# 선택된 계좌에서 고정된 계좌로 이체를 실행합니다.
POST {{baseUrl}}/transfers
Content-Type: application/json

{
  "sourceAccountNumber": "{{selectedAccountNumber}}",
  "targetAccountNumber": "ACCT-FIXED-TARGET",
  "amount": 10.00
}

### 5. 다시 모든 계좌 목록 조회 및 랜덤 계좌 선택
GET {{baseUrl}}/accounts

> {%
    // 응답에서 임의의 계좌를 추출 (첫 번째 계좌와 다른 계좌 선택)
    const response = JSON.parse(response.body);
    if (response.accounts && response.accounts.length > 0) {
        // 임의의 계좌 선택
        let randomIndex;
        let previousAccount = client.global.get("selectedAccountNumber");
        let attempts = 0;
        const maxAttempts = 10; // 무한 루프 방지
        
        // 이전에 선택된 계좌와 다른 계좌 선택 시도
        do {
            randomIndex = Math.floor(Math.random() * response.accounts.length);
            attempts++;
        } while (response.accounts[randomIndex].accountNumber === previousAccount && 
                 attempts < maxAttempts && 
                 response.accounts.length > 1);
        
        const selectedAccount = response.accounts[randomIndex];
        
        // 새 변수에 저장
        client.global.set("newSelectedAccountNumber", selectedAccount.accountNumber);
        client.global.set("newSelectedAccountBalance", selectedAccount.balance);
        
        // 콘솔에 출력
        console.log(`New Selected Account: ${selectedAccount.accountNumber} with balance: ${selectedAccount.balance}`);
    } else {
        console.log("No accounts found in the response");
    }
%}

### 6. 새로 선택된 계좌로 이체 실행
POST {{baseUrl}}/transfers
Content-Type: application/json

{
  "sourceAccountNumber": "{{selectedAccountNumber}}",
  "targetAccountNumber": "{{newSelectedAccountNumber}}",
  "amount": 5.00
}

### 7. 이체 후 원본 계좌 잔액 확인
GET {{baseUrl}}/accounts/{{selectedAccountNumber}}

### 8. 이체 후 대상 계좌 잔액 확인
GET {{baseUrl}}/accounts/{{newSelectedAccountNumber}}
